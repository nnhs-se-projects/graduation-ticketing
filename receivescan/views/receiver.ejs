<!-- include header -->
<%- include('include/_header') %>
<!-- /include header -->

<!-- Main Site -->
<main>
  <h1 id="title">Scan Tickets</h1>
  <div id="datafield"></div>
  <div class="container">
    <div id="scan-validity">
        <input type="text" id="barcodeInput" autofocus /></input>
      <div class="row" id="wait_status">
        <h2>Waiting for scan...</h2>
      </div>
      <div class="row" id="name"></div>
      <div class="row" id="id_number"></div>
      <div class="row" id="is_valid"></div>
      <div class="row" id="time_scanned"></div>
      <div class="row" id="ticket_row"></div>
    </div>
   <div id="buttons">
   <button class="button" id="import" onclick="promptPassword('import')">Import</button>
  <button class="button" id="export" onclick="promptPassword('export')">Export</button>
  <button class="button" id="revertImport" onclick="promptPassword('revert')">Revert Import</button>
  

  <!-- Password Input for Importing, Exporting, and Reverting -->
  <input class="button" id="passwordInput" type="password" style="display:none;" placeholder="Enter password" />
  <button class="button" id="confirmPassword" style="display:none;" onclick="confirmPassword()">Confirm</button>
  <button class="button" id="cancelPassword" style="display:none;" onclick="cancelPassword()">Cancel</button>

  <button class="button" id="override" onclick="override()">Override</button>
  <input class="button" id="overrideInput" type="text" autofocus /></input>
  <button class="button" id="confirm" onclick="overrideConfirm(true)">Confirm</button>
  <button class="button" id="cancel" onclick="overrideConfirm(false)">Cancel</button>
  </div>

<script>
  let actionType = "";

  function promptPassword(action) {
    actionType = action;
    document.getElementById("import").style.display = "none";
    document.getElementById("export").style.display = "none";
    document.getElementById("revertImport").style.display = "none";
    document.getElementById("passwordInput").style.display = "block";
    document.getElementById("confirmPassword").style.display = "block";
    document.getElementById("cancelPassword").style.display = "block";
    document.getElementById("passwordInput").focus();
  }

  function confirmPassword() {
    const enteredPassword = document.getElementById("passwordInput").value;
    const correctPassword = "admin123"; // Change to your actual password

    if (enteredPassword === correctPassword) {
      switch (actionType) {
        case "import":
          window.location.href = "/importNames";
          break;
        case "export":
          window.location.href = "/exportNames";
          break;
        case "revert":
          if (confirm("Are you sure you want to revert the last import?")) {
            fetch("/revertDatabase", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
            })
              .then((response) => response.json())
              .then((data) => {
                alert(data.message);
              })
              .catch((error) => {
                console.error("Error:", error);
              });
          }
          break;
      }
    } else {
      alert("Incorrect password. Access denied.");
    }

    cancelPassword();
  }

  function cancelPassword() {
    document.getElementById("passwordInput").value = "";
    document.getElementById("import").style.display = "block";
    document.getElementById("export").style.display = "block";
    document.getElementById("revertImport").style.display = "block";
    document.getElementById("passwordInput").style.display = "none";
    document.getElementById("confirmPassword").style.display = "none";
    document.getElementById("cancelPassword").style.display = "none";
  }

// Hides elements initially
document.getElementById("overrideInput").style.display = "none";
document.getElementById("confirm").style.display = "none";
document.getElementById("cancel").style.display = "none";

// Set parameters for timestamp formatting
const timeOptions = {
  timeZone: "America/Chicago",
  month: "2-digit",
  day: "2-digit",
  year: "numeric",
  hour: "2-digit",
  minute: "2-digit",
  hour12: true,
};

// Initializes variables
var barcodeData = null;
var previousScanTime = null;

document.addEventListener("keydown", function (event) {
    console.log(event.key);
    // Check if the key pressed is Enter (key code 13)
    if (event.keyCode === 13) {
      // Barcode termination character detected, handle barcode data
      barcodeData = document.getElementById("barcodeInput").value;
      console.log("Barcode scanned:", barcodeData);
      const currentTimestamp = new Date();

      // Update timestamp timezone
      currentTimestamp.toLocaleString("en-US", { timeZone: "America/Chicago" });

      const scanData = document.getElementById("datafield");

      // Send post request to the server with what barcode was scanned and at what time
      fetch("/scanned", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          barcode: barcodeData,
          timestamp: currentTimestamp,
        }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to fetch data");
          }
          return response.json();
        })
        .then((data) => {
          // Fetch student object data from the server
          first_name = data.studObj.first_name;
          last_name = data.studObj.last_name;
          id_num = data.studObj.id;

          // Grab html elements
          const scan_validity = document.getElementById("scan-validity");
          const buttons = document.getElementById("buttons");
          const overrideButton = document.getElementById("override");
          const wait_status = document.getElementById("wait_status");
          const displayName = document.getElementById("name");
          const displayNum = document.getElementById("id_number");
          const displayValid = document.getElementById("is_valid");
          const displayTimeStamp = document.getElementById("time_scanned");
          const otherTicket = document.getElementById("ticket_row");

          // update information and style
          wait_status.hidden = true;
          displayName.textContent = first_name + " " + last_name;
          displayNum.textContent = id_num;

          // Set parameters for timestamp formatting
          const timeOptions = {
            timeZone: "America/Chicago",
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
          };

          console.log(scan_validity.childNodes);

          scan_validity.childNodes.forEach((child) => {
            if (child.id == "ticket_row") {
              scan_validity.removeChild(child);
              console.log(child);
            }
          });

          // Styling for an invalid scan
          if (data.validity == false) {
            overrideButton.style.opacity = "100";
            overrideButton.style.pointerEvents = "auto";
            scan_validity.style.backgroundColor = "red";
            displayValid.textContent = "INVALID SCAN";
            displayTimeStamp.textContent = "Time Last Scanned: ";

            scan_validity.childNodes.forEach((child) => {
              if (child.id == "ticket_row") {
                scan_validity.removeChild(child);
              }
            });

            // Logic to find the time of the last valid scan of a invalidly scanned ticket
            var previousScanTime = null;
            data.studObj.tickets.forEach((ticket) => {
              if (ticket.barcode == barcodeData) {
                previousScanTime = new Date(ticket.time_scanned).toLocaleString(
                  "en-US",
                  timeOptions
                );
                displayTimeStamp.textContent += previousScanTime;
              } else {
                otherTicket.textContent = ticket.access_code;
                if (ticket.time_scanned == null) {
                  otherTicket.textContent += ": VALID TICKET";
                } else {
                  otherTicket.textContent += ": INVALID TICKET -  ";
                  otherTicket.textContent += new Date(
                    ticket.time_scanned
                  ).toLocaleString("en-US", timeOptions);
                }
                scan_validity.appendChild(otherTicket);
              }
            });

          }
          // Styling for a valid scan
          else {
            scan_validity.style.backgroundColor = "green";
            displayValid.textContent = "VALID SCAN";
            overrideButton.style.opacity = "0";
            overrideButton.style.pointerEvents = "none";
            displayTimeStamp.textContent =
              "Time Scanned: " +
              new Date(currentTimestamp).toLocaleString("en-US", timeOptions);
            scan_validity.childNodes.forEach((child) => {
              if (child.id == "ticket_row") {
                scan_validity.removeChild(child);
                console.log(child);
              }
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });

      // Clear the input for the next scan
      document.getElementById("barcodeInput").value = "";
    }
  });

function override() {
  document.getElementById("import").style.display = "none";
  document.getElementById("export").style.display = "none";
  document.getElementById("revertImport").style.display = "none";
  document.getElementById("override").style.display = "none";
  document.getElementById("overrideInput").style.display = "block";
  document.getElementById("confirm").style.display = "block";
  document.getElementById("cancel").style.display = "block";
  document.getElementById("overrideInput").focus();
}

function overrideConfirm(isConfirmed) {
  if (isConfirmed) {
    const currentTimestamp = new Date();
    const time = currentTimestamp.toLocaleString("en-US", timeOptions);
    const name = document.getElementById("overrideInput").textContent;
    const overrideLog =
      "Overridden by " +
      name +
      " at " +
      time +
      ", was previously scanned at " +
      previousScanTime +
      "; ";

    fetch("/override", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        barcode: barcodeData,
        log: overrideLog,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch data");
        }
        return response.json();
      })
      .then((data) => {
        console.log(data);
      })
      .catch((error) => {
        console.error("Error:", error);
      });
      
  }

  // Reset the display
  document.getElementById("overrideInput").value = "";
  document.getElementById("import").style.display = "block";
  document.getElementById("export").style.display = "block";
  document.getElementById("revertImport").style.display = "block";
  document.getElementById("override").style.display = "block";
  document.getElementById("overrideInput").style.display = "none";
  document.getElementById("confirm").style.display = "none";
  document.getElementById("cancel").style.display = "none";
}

</script>

<!-- include footer -->
<%- include('include/_footer') %>
<!-- /include footer -->
