<!-- include header -->
<%- include('include/_header') %>
<!-- /include header -->

<!-- Main Site -->
<main>
  <h1 id="title">Scan Tickets</h1>
  <div id="datafield"></div>
  <div class="container">
    <div id="scan-validity">
      <div class="row" id="wait_status">
        <h2>Waiting for scan...</h2>
      </div>
      <div class="row" id="name"></div>
      <div class="row" id="id_number"></div>
      <div class="row" id="is_valid"></div>
      <div class="row" id="time_scanned"></div>
    </div>
  </div>
</main>
<!-- /Main Site -->
<script>
  document.addEventListener("keydown", function (event) {
    console.log(event.key);
    // Check if the key pressed is Enter (key code 13)
    if (event.keyCode === 13) {
      let overrideButton;
      try {
        overrideButton = document.getElementsByClassName("override");
      } catch (error) {
        console.error("Error fetching elements by class name:", error);
      }
      console.log(overrideButton);
      // Check if overrideButton is defined before using it
      if (overrideButton && overrideButton.length > 0) {
        Array.from(overrideButton).forEach((button) => {
          button.remove();
        });
      } else {
        console.log('No elements with the class "override" found.');
      }

      // Barcode termination character detected, handle barcode data
      var barcodeData = document.getElementById("barcodeInput").value;
      console.log("Barcode scanned:", barcodeData);
      const currentTimestamp = new Date();

      // Update timestamp timezone
      currentTimestamp.toLocaleString("en-US", { timeZone: "America/Chicago" });

      const scanData = document.getElementById("datafield");

      // Send post request to the server with what barcode was scanned and at what time
      fetch("/scanned", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          barcode: barcodeData,
          timestamp: currentTimestamp,
        }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to fetch data");
          }
          return response.json();
        })
        .then((data) => {
          // Fetch student object data from the server
          first_name = data.studObj.first_name;
          last_name = data.studObj.last_name;
          id_num = data.studObj.id;

          // Grab html elements
          const scan_validity = document.getElementById("scan-validity");
          const wait_status = document.getElementById("wait_status");
          const displayName = document.getElementById("name");
          const displayNum = document.getElementById("id_number");
          const displayValid = document.getElementById("is_valid");
          const displayTimeStamp = document.getElementById("time_scanned");

          // update information and style
          wait_status.hidden = true;
          scan_validity.style.border = "10px solid black";
          displayName.textContent = first_name + " " + last_name;
          displayNum.textContent = id_num;

          // Set parameters for timestamp formatting
          const timeOptions = {
            timeZone: "America/Chicago",
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
          };

          console.log(scan_validity.childNodes);

          scan_validity.childNodes.forEach((child) => {
            if (child.className == "ticket-row") {
              scan_validity.removeChild(child);
              console.log(child);
            }
          });

          // Styling for an invalid scan
          if (data.validity == false) {
            scan_validity.style.backgroundColor = "red";
            displayValid.textContent = "INVALID SCAN";
            displayTimeStamp.textContent = "Time Last Scanned: ";

            scan_validity.childNodes.forEach((child) => {
              if (child.className == "ticket-row") {
                scan_validity.removeChild(child);
              }
            });

            // Logic to find the time of the last valid scan of a invalidly scanned ticket
            var previousScanTime = null;
            data.studObj.tickets.forEach((ticket) => {
              if (ticket.barcode == barcodeData) {
                previousScanTime = new Date(ticket.time_scanned).toLocaleString(
                  "en-US",
                  timeOptions
                );
                displayTimeStamp.textContent += previousScanTime;
              } else {
                var otherTicket = document.createElement("div");
                otherTicket.classList.add("ticket-row");
                otherTicket.setAttribute("id", "ticket-" + ticket.access_code);
                otherTicket.textContent = ticket.access_code;
                if (ticket.time_scanned == null) {
                  otherTicket.textContent += ": VALID TICKET";
                } else {
                  otherTicket.textContent += ": INVALID TICKET -  ";
                  otherTicket.textContent += new Date(
                    ticket.time_scanned
                  ).toLocaleString("en-US", timeOptions);
                }
                scan_validity.appendChild(otherTicket);
              }
            });

            var overrideButton = document.createElement("button");
            overrideButton.className = "override";
            overrideButton.textContent = "OVERRIDE";
            scan_validity.appendChild(overrideButton);

            overrideButton.addEventListener("click", function () {
              console.log(
                "Overridden " + first_name + last_name + "'s ticket to valid"
              );
              var overrideAuth = window.prompt(
                "Are you sure you want to override this invalid scan? Sign off to override: "
              );
              if (overrideAuth !== null && overrideAuth !== "") {
                const overrideLog =
                  "Overridden by " +
                  overrideAuth +
                  " at " +
                  currentTimestamp +
                  ", was previously scanned at " +
                  previousScanTime +
                  "; ";
                alert(overrideLog);
                fetch("/override", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    log: overrideLog,
                    barcode: barcodeData,
                  }),
                });
                alert("Override Successful, please scan again.");
              } else {
                alert("Override cancelled.");
              }
            });
          }
          // Styling for a valid scan
          else {
            scan_validity.style.backgroundColor = "green";
            displayValid.textContent = "VALID SCAN";
            displayTimeStamp.textContent =
              "Time Scanned: " +
              new Date(currentTimestamp).toLocaleString("en-US", timeOptions);
            scan_validity.childNodes.forEach((child) => {
              if (child.className == "ticket-row") {
                scan_validity.removeChild(child);
                console.log(child);
              }
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });

      // Clear the input for the next scan
      document.getElementById("barcodeInput").value = "";
      document.getElementById("barcodeInput").focus();
    } else {
      // Append the pressed key to the barcode input
      var key = event.key;
      document.getElementById("barcodeInput").value += key;
    }
  });
</script>

<!-- Input field to capture barcode data -->
<input type="text" id="barcodeInput" style="display: none" />

<!-- Focus the input field initially -->
<script>
  document.getElementById("barcodeInput").focus();
</script>

<!-- include footer -->
<%- include('include/_footer') %>
<!-- /include footer -->
